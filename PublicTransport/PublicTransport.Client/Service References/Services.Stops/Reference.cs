//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublicTransport.Client.Services.Stops {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.Stops.IStopService")]
    public interface IStopService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/CreateStop", ReplyAction="http://tempuri.org/IStopService/CreateStopResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IStopService/CreateStopValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.StopDto CreateStop(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/CreateStop", ReplyAction="http://tempuri.org/IStopService/CreateStopResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto> CreateStopAsync(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/UpdateStop", ReplyAction="http://tempuri.org/IStopService/UpdateStopResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IStopService/UpdateStopValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.StopDto UpdateStop(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/UpdateStop", ReplyAction="http://tempuri.org/IStopService/UpdateStopResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto> UpdateStopAsync(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/DeleteStop", ReplyAction="http://tempuri.org/IStopService/DeleteStopResponse")]
        void DeleteStop(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/DeleteStop", ReplyAction="http://tempuri.org/IStopService/DeleteStopResponse")]
        System.Threading.Tasks.Task DeleteStopAsync(PublicTransport.Services.DataTransfer.StopDto stop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterStops", ReplyAction="http://tempuri.org/IStopService/FilterStopsResponse")]
        PublicTransport.Services.DataTransfer.StopDto[] FilterStops(PublicTransport.Services.DataTransfer.Filters.StopFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterStops", ReplyAction="http://tempuri.org/IStopService/FilterStopsResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto[]> FilterStopsAsync(PublicTransport.Services.DataTransfer.Filters.StopFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterZones", ReplyAction="http://tempuri.org/IStopService/FilterZonesResponse")]
        PublicTransport.Services.DataTransfer.ZoneDto[] FilterZones(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterZones", ReplyAction="http://tempuri.org/IStopService/FilterZonesResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.ZoneDto[]> FilterZonesAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterStreets", ReplyAction="http://tempuri.org/IStopService/FilterStreetsResponse")]
        PublicTransport.Services.DataTransfer.StreetDto[] FilterStreets(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStopService/FilterStreets", ReplyAction="http://tempuri.org/IStopService/FilterStreetsResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StreetDto[]> FilterStreetsAsync(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStopServiceChannel : PublicTransport.Client.Services.Stops.IStopService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopServiceClient : System.ServiceModel.ClientBase<PublicTransport.Client.Services.Stops.IStopService>, PublicTransport.Client.Services.Stops.IStopService {
        
        public StopServiceClient() {
        }
        
        public StopServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StopServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StopServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StopServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PublicTransport.Services.DataTransfer.StopDto CreateStop(PublicTransport.Services.DataTransfer.StopDto stop) {
            return base.Channel.CreateStop(stop);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto> CreateStopAsync(PublicTransport.Services.DataTransfer.StopDto stop) {
            return base.Channel.CreateStopAsync(stop);
        }
        
        public PublicTransport.Services.DataTransfer.StopDto UpdateStop(PublicTransport.Services.DataTransfer.StopDto stop) {
            return base.Channel.UpdateStop(stop);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto> UpdateStopAsync(PublicTransport.Services.DataTransfer.StopDto stop) {
            return base.Channel.UpdateStopAsync(stop);
        }
        
        public void DeleteStop(PublicTransport.Services.DataTransfer.StopDto stop) {
            base.Channel.DeleteStop(stop);
        }
        
        public System.Threading.Tasks.Task DeleteStopAsync(PublicTransport.Services.DataTransfer.StopDto stop) {
            return base.Channel.DeleteStopAsync(stop);
        }
        
        public PublicTransport.Services.DataTransfer.StopDto[] FilterStops(PublicTransport.Services.DataTransfer.Filters.StopFilter filter) {
            return base.Channel.FilterStops(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StopDto[]> FilterStopsAsync(PublicTransport.Services.DataTransfer.Filters.StopFilter filter) {
            return base.Channel.FilterStopsAsync(filter);
        }
        
        public PublicTransport.Services.DataTransfer.ZoneDto[] FilterZones(string name) {
            return base.Channel.FilterZones(name);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.ZoneDto[]> FilterZonesAsync(string name) {
            return base.Channel.FilterZonesAsync(name);
        }
        
        public PublicTransport.Services.DataTransfer.StreetDto[] FilterStreets(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter) {
            return base.Channel.FilterStreets(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StreetDto[]> FilterStreetsAsync(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter) {
            return base.Channel.FilterStreetsAsync(filter);
        }
    }
}
