//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublicTransport.Client.Services.Agencies {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.Agencies.IAgencyService")]
    public interface IAgencyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/CreateAgency", ReplyAction="http://tempuri.org/IAgencyService/CreateAgencyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IAgencyService/CreateAgencyValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.AgencyDto CreateAgency(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/CreateAgency", ReplyAction="http://tempuri.org/IAgencyService/CreateAgencyResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto> CreateAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/UpdateAgency", ReplyAction="http://tempuri.org/IAgencyService/UpdateAgencyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IAgencyService/UpdateAgencyValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.AgencyDto UpdateAgency(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/UpdateAgency", ReplyAction="http://tempuri.org/IAgencyService/UpdateAgencyResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto> UpdateAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/DeleteAgency", ReplyAction="http://tempuri.org/IAgencyService/DeleteAgencyResponse")]
        void DeleteAgency(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/DeleteAgency", ReplyAction="http://tempuri.org/IAgencyService/DeleteAgencyResponse")]
        System.Threading.Tasks.Task DeleteAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/FilterAgencies", ReplyAction="http://tempuri.org/IAgencyService/FilterAgenciesResponse")]
        PublicTransport.Services.DataTransfer.AgencyDto[] FilterAgencies(PublicTransport.Services.DataTransfer.Filters.AgencyFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/FilterAgencies", ReplyAction="http://tempuri.org/IAgencyService/FilterAgenciesResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto[]> FilterAgenciesAsync(PublicTransport.Services.DataTransfer.Filters.AgencyFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/FilterStreets", ReplyAction="http://tempuri.org/IAgencyService/FilterStreetsResponse")]
        PublicTransport.Services.DataTransfer.StreetDto[] FilterStreets(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgencyService/FilterStreets", ReplyAction="http://tempuri.org/IAgencyService/FilterStreetsResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StreetDto[]> FilterStreetsAsync(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgencyServiceChannel : PublicTransport.Client.Services.Agencies.IAgencyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgencyServiceClient : System.ServiceModel.ClientBase<PublicTransport.Client.Services.Agencies.IAgencyService>, PublicTransport.Client.Services.Agencies.IAgencyService {
        
        public AgencyServiceClient() {
        }
        
        public AgencyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AgencyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PublicTransport.Services.DataTransfer.AgencyDto CreateAgency(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            return base.Channel.CreateAgency(agency);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto> CreateAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            return base.Channel.CreateAgencyAsync(agency);
        }
        
        public PublicTransport.Services.DataTransfer.AgencyDto UpdateAgency(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            return base.Channel.UpdateAgency(agency);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto> UpdateAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            return base.Channel.UpdateAgencyAsync(agency);
        }
        
        public void DeleteAgency(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            base.Channel.DeleteAgency(agency);
        }
        
        public System.Threading.Tasks.Task DeleteAgencyAsync(PublicTransport.Services.DataTransfer.AgencyDto agency) {
            return base.Channel.DeleteAgencyAsync(agency);
        }
        
        public PublicTransport.Services.DataTransfer.AgencyDto[] FilterAgencies(PublicTransport.Services.DataTransfer.Filters.AgencyFilter filter) {
            return base.Channel.FilterAgencies(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.AgencyDto[]> FilterAgenciesAsync(PublicTransport.Services.DataTransfer.Filters.AgencyFilter filter) {
            return base.Channel.FilterAgenciesAsync(filter);
        }
        
        public PublicTransport.Services.DataTransfer.StreetDto[] FilterStreets(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter) {
            return base.Channel.FilterStreets(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.StreetDto[]> FilterStreetsAsync(PublicTransport.Services.DataTransfer.Filters.StreetFilter filter) {
            return base.Channel.FilterStreetsAsync(filter);
        }
    }
}
