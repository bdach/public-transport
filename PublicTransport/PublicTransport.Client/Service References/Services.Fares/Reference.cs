//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublicTransport.Client.Services.Fares {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.Fares.IFareService")]
    public interface IFareService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/CreateFareAttribute", ReplyAction="http://tempuri.org/IFareService/CreateFareAttributeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IFareService/CreateFareAttributeValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.FareAttributeDto CreateFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/CreateFareAttribute", ReplyAction="http://tempuri.org/IFareService/CreateFareAttributeResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto> CreateFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/UpdateFareAttribute", ReplyAction="http://tempuri.org/IFareService/UpdateFareAttributeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IFareService/UpdateFareAttributeValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.FareAttributeDto UpdateFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/UpdateFareAttribute", ReplyAction="http://tempuri.org/IFareService/UpdateFareAttributeResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto> UpdateFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/DeleteFareAttribute", ReplyAction="http://tempuri.org/IFareService/DeleteFareAttributeResponse")]
        void DeleteFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/DeleteFareAttribute", ReplyAction="http://tempuri.org/IFareService/DeleteFareAttributeResponse")]
        System.Threading.Tasks.Task DeleteFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/CreateFareRule", ReplyAction="http://tempuri.org/IFareService/CreateFareRuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IFareService/CreateFareRuleValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.FareRuleDto CreateFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/CreateFareRule", ReplyAction="http://tempuri.org/IFareService/CreateFareRuleResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareRuleDto> CreateFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/UpdateFareRule", ReplyAction="http://tempuri.org/IFareService/UpdateFareRuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IFareService/UpdateFareRuleValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.FareRuleDto UpdateFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/UpdateFareRule", ReplyAction="http://tempuri.org/IFareService/UpdateFareRuleResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareRuleDto> UpdateFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/DeleteFareRule", ReplyAction="http://tempuri.org/IFareService/DeleteFareRuleResponse")]
        void DeleteFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/DeleteFareRule", ReplyAction="http://tempuri.org/IFareService/DeleteFareRuleResponse")]
        System.Threading.Tasks.Task DeleteFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterFares", ReplyAction="http://tempuri.org/IFareService/FilterFaresResponse")]
        PublicTransport.Services.DataTransfer.FareAttributeDto[] FilterFares(PublicTransport.Services.DataTransfer.Filters.FareFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterFares", ReplyAction="http://tempuri.org/IFareService/FilterFaresResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto[]> FilterFaresAsync(PublicTransport.Services.DataTransfer.Filters.FareFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterRoutes", ReplyAction="http://tempuri.org/IFareService/FilterRoutesResponse")]
        PublicTransport.Services.DataTransfer.RouteDto[] FilterRoutes(PublicTransport.Services.DataTransfer.Filters.RouteFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterRoutes", ReplyAction="http://tempuri.org/IFareService/FilterRoutesResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.RouteDto[]> FilterRoutesAsync(PublicTransport.Services.DataTransfer.Filters.RouteFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterZones", ReplyAction="http://tempuri.org/IFareService/FilterZonesResponse")]
        PublicTransport.Services.DataTransfer.ZoneDto[] FilterZones(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFareService/FilterZones", ReplyAction="http://tempuri.org/IFareService/FilterZonesResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.ZoneDto[]> FilterZonesAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFareServiceChannel : PublicTransport.Client.Services.Fares.IFareService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FareServiceClient : System.ServiceModel.ClientBase<PublicTransport.Client.Services.Fares.IFareService>, PublicTransport.Client.Services.Fares.IFareService {
        
        public FareServiceClient() {
        }
        
        public FareServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FareServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FareServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FareServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PublicTransport.Services.DataTransfer.FareAttributeDto CreateFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            return base.Channel.CreateFareAttribute(fareAttribute);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto> CreateFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            return base.Channel.CreateFareAttributeAsync(fareAttribute);
        }
        
        public PublicTransport.Services.DataTransfer.FareAttributeDto UpdateFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            return base.Channel.UpdateFareAttribute(fareAttribute);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto> UpdateFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            return base.Channel.UpdateFareAttributeAsync(fareAttribute);
        }
        
        public void DeleteFareAttribute(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            base.Channel.DeleteFareAttribute(fareAttribute);
        }
        
        public System.Threading.Tasks.Task DeleteFareAttributeAsync(PublicTransport.Services.DataTransfer.FareAttributeDto fareAttribute) {
            return base.Channel.DeleteFareAttributeAsync(fareAttribute);
        }
        
        public PublicTransport.Services.DataTransfer.FareRuleDto CreateFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            return base.Channel.CreateFareRule(fareRule);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareRuleDto> CreateFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            return base.Channel.CreateFareRuleAsync(fareRule);
        }
        
        public PublicTransport.Services.DataTransfer.FareRuleDto UpdateFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            return base.Channel.UpdateFareRule(fareRule);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareRuleDto> UpdateFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            return base.Channel.UpdateFareRuleAsync(fareRule);
        }
        
        public void DeleteFareRule(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            base.Channel.DeleteFareRule(fareRule);
        }
        
        public System.Threading.Tasks.Task DeleteFareRuleAsync(PublicTransport.Services.DataTransfer.FareRuleDto fareRule) {
            return base.Channel.DeleteFareRuleAsync(fareRule);
        }
        
        public PublicTransport.Services.DataTransfer.FareAttributeDto[] FilterFares(PublicTransport.Services.DataTransfer.Filters.FareFilter filter) {
            return base.Channel.FilterFares(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.FareAttributeDto[]> FilterFaresAsync(PublicTransport.Services.DataTransfer.Filters.FareFilter filter) {
            return base.Channel.FilterFaresAsync(filter);
        }
        
        public PublicTransport.Services.DataTransfer.RouteDto[] FilterRoutes(PublicTransport.Services.DataTransfer.Filters.RouteFilter filter) {
            return base.Channel.FilterRoutes(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.RouteDto[]> FilterRoutesAsync(PublicTransport.Services.DataTransfer.Filters.RouteFilter filter) {
            return base.Channel.FilterRoutesAsync(filter);
        }
        
        public PublicTransport.Services.DataTransfer.ZoneDto[] FilterZones(string name) {
            return base.Channel.FilterZones(name);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.ZoneDto[]> FilterZonesAsync(string name) {
            return base.Channel.FilterZonesAsync(name);
        }
    }
}
