//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublicTransport.Client.Services.Users {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.Users.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IUserService/CreateUserValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.UserDto CreateUser(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto> CreateUserAsync(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PublicTransport.Services.Exceptions.ValidationFault), Action="http://tempuri.org/IUserService/UpdateUserValidationFaultFault", Name="ValidationFault", Namespace="http://schemas.datacontract.org/2004/07/PublicTransport.Services.Exceptions")]
        PublicTransport.Services.DataTransfer.UserDto UpdateUser(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto> UpdateUserAsync(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        void DeleteUser(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(PublicTransport.Services.DataTransfer.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FilterUsers", ReplyAction="http://tempuri.org/IUserService/FilterUsersResponse")]
        PublicTransport.Services.DataTransfer.UserDto[] FilterUsers(PublicTransport.Services.DataTransfer.Filters.UserFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FilterUsers", ReplyAction="http://tempuri.org/IUserService/FilterUsersResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto[]> FilterUsersAsync(PublicTransport.Services.DataTransfer.Filters.UserFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllRoles", ReplyAction="http://tempuri.org/IUserService/GetAllRolesResponse")]
        PublicTransport.Services.DataTransfer.RoleDto[] GetAllRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllRoles", ReplyAction="http://tempuri.org/IUserService/GetAllRolesResponse")]
        System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.RoleDto[]> GetAllRolesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : PublicTransport.Client.Services.Users.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<PublicTransport.Client.Services.Users.IUserService>, PublicTransport.Client.Services.Users.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PublicTransport.Services.DataTransfer.UserDto CreateUser(PublicTransport.Services.DataTransfer.UserDto user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto> CreateUserAsync(PublicTransport.Services.DataTransfer.UserDto user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public PublicTransport.Services.DataTransfer.UserDto UpdateUser(PublicTransport.Services.DataTransfer.UserDto user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto> UpdateUserAsync(PublicTransport.Services.DataTransfer.UserDto user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DeleteUser(PublicTransport.Services.DataTransfer.UserDto user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(PublicTransport.Services.DataTransfer.UserDto user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public PublicTransport.Services.DataTransfer.UserDto[] FilterUsers(PublicTransport.Services.DataTransfer.Filters.UserFilter filter) {
            return base.Channel.FilterUsers(filter);
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.UserDto[]> FilterUsersAsync(PublicTransport.Services.DataTransfer.Filters.UserFilter filter) {
            return base.Channel.FilterUsersAsync(filter);
        }
        
        public PublicTransport.Services.DataTransfer.RoleDto[] GetAllRoles() {
            return base.Channel.GetAllRoles();
        }
        
        public System.Threading.Tasks.Task<PublicTransport.Services.DataTransfer.RoleDto[]> GetAllRolesAsync() {
            return base.Channel.GetAllRolesAsync();
        }
    }
}
