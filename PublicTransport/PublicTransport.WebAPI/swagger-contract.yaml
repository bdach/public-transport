swagger: "2.0"
info:
  title: Public Transport
  version: 3.0.0
  contact:
    name: Bart≈Çomiej Dach, Tymon Felski
    url: http://github.com/bdach/public-transport/
    email: dachb@student.mini.pw.edu.pl, felskit@student.mini.pw.edu.pl
host: localhost:49878
basePath: /api
definitions:
  Agency:
    type: object
    properties:
      Name:
        type: string
        description: The full name of the transit agency.
      Phone:
        type: string
        description: Contains a single voice telephone number for the specified agency.
        pattern: "[0-9+#]+"
      Url:
        type: string
        description: Contains the URL of the transit agency. The value must be a fully qualified URL that includes `http://` or `https://` and any special characters in the URL must be correctly escaped.
      Regon:
        type: string
        description: Contains the REGON number of the transit agency.
      StreetName:
        type: string
        description: Contains the name of the street the agency is located on.
      StreetNumber:
        type: string
        description: Contains the street number of the agency.
      CityName:
        type: string
        description: Contains the name of the city the agency is located in.
  ErrorMessage:
    type: object
    properties:
      Message:
        type: string
        description: Message detailing the error cause.
  PasswordChangeRequest:
    type: object
    properties:
      UserName:
        type: string
        description: The username of the user requesting a password change.
        required: true
      OldPassword:
        type: string
        description: The user's old password.
        required: true
      NewPassword:
        type: string
        description: The user's new password
        required: true
  RegistrationInfo:
    type: object
    properties:
      FullName:
        type: string
        description: The user's full name to be stored by the app.
        required: true
      UserName:
        type: string
        description: Username to be used by the user to log in to the app.
        required: true
      Password:
        type: string
        description: The user's desired password, to be used when logging in.
        required: true
  Route:
    type: object
    properties:
      Id:
        type: integer
        format: int64
        description: The ID number of the route.
      ShortName:
        type: string
        description: Contains the short name of a route. This often will be a short, abstract identifier like "32", "100X" or "Green" that riders use to identify a route, but which doesn't give any indication of what places the route serves.
      LongName:
        type: string
        description: Contains the full name of a route. This name is generally more descriptive than the short name and will often include the route's destination or stop.
      RouteType:
        type: integer
        description: Describes the type of transportation used on a route.
        enum:
          - Tram
          - Subway
          - Rail
          - Bus
          - Ferry
      Agency:
        $ref: '#/definitions/Agency'
        description: Contains information about the agency operating the particular route.
  RouteFilter:
    type: object
    properties:
      AgencyNameFilter:
        type: string
        description: Agency name filter.
      LongNameFilter:
        type: string
        description: Route long name filter.
      ShortNameFilter:
        type: string
        description: Route short name filter.
      RouteTypeFilter:
        type: integer # these enums are borked rn - getting serialized into numbers and not strings
        enum:
          - Tram
          - Subway
          - Rail
          - Bus
          - Ferry
        description: Route type filter.
  RouteTimetableEntry:
    type: object
    properties:
      Key:
        $ref: '#/definitions/Route'
      Value:
        type: array
        items:
          $ref: '#/definitions/TimetableEntry'
  ServiceDetails:
    type: object
    properties:
      Monday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Mondays in the date range.
      Tuesday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Tuesdays in the date range.
      Wednesday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Wednesdays in the date range.
      Thursday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Thursdays in the date range.
      Friday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Fridays in the date range.
      Saturday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Saturdays in the date range.
      Sunday:
        type: boolean
        description: Contains a binary value that indicates whether the service is valid for all Sundays in the date range.
      StartDate:
        type: string
        format: date-time
        description: Contains the start date for the service.
      EndDate:
        type: string
        format: date-time
        description: Contains the end date for the service.
  Stop:
    type: object
    properties:
      Id:
        type: integer
        format: int64
        description: Contains the ID of the stop.
      Name:
        type: string
        description: Contains the name of a stop or station.
      StreetName:
        type: string
        description: Contains the name of the street the stop is located on.
      CityName:
        type: string
        description: Contains the name of the city the stop is located in.
      ParentStation:
        $ref: '#/definitions/Stop'
        description: For stops that are physically located inside stations, this field identifies the station associated with the stop. Used only if the value of `IsStation` is false.
      IsStation:
        type: boolean
        description: Identifies whether this stop object represents a stop or station.
  StopFilter:
    type: object
    properties:
      StopNameFilter:
        type: string
        description: Contains the stop name string filter parameter.
      StreetNameFilter:
        type: string
        description: Contains the street name string filter parameter.
      CityNameFilter:
        type: string
        description: Contains the city name string filter parameter.
      ZoneNameFilter:
        type: string
        description: Contains the zone name string filter parameter.
      ParentStationNameFilter:
        type: string
        description: Contains the parent station name string filter parameter.
      OnlyStations:
        type: boolean
        description: Limits the search query only to stops which are stations.
  StopTimetableEntry:
    type: object
    properties:
      Key:
        $ref: '#/definitions/Route'
      Value:
        type: array
        items:
          $ref: '#/definitions/TimetableEntry'
  TimetableEntry:
    type: object
    properties:
      ArrivalTime:
        type: string
        format: date-time
        description: Specifies the arrival time at a specific stop for a specific trip on a route.
      DepartureTime:
        type: string
        format: date-time
        description: Specifies the departure time at a specific stop for a specific trip on a route.
      ShortName:
        type: string
        description: Contains the text that appears in   schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, this field will be left blank.
      Headsign:
        type: string
        description: Contains the text that appears on a sign that identifies the trip's destination to passengers. This field is used to distinguish between different patterns of service in the same route.
      Direction:
        type: boolean
        description: Contains a binary value that indicates the direction of travel for a trip. Use this field to distinguish between bi-directional trips on the same route. This field is not used for routing; it provides a way to separate trips by direction when publishing time tables.
  TripInfo:
    type: object
    properties:
      OriginStop:
        $ref: '#/definitions/TripStop'
      DestinationStop:
        $ref: '#/definitions/TripStop'
      Route:
        $ref: '#/definitions/Route'
      ServiceDetails:
        $ref: '#/definitions/ServiceDetails'
  TripSearchFilter:
    type: object
    properties:
      OriginStopIdFilter:
        type: integer
        format: int64
        required: true
        description: The ID of the origin stop.
      DestinationStopIdFilter:
        type: integer
        format: int64
        required: true
        description: The ID of the destination stop.
  TripStop:
    type: object
    properties:
      Stop:
        $ref: '#/definitions/Stop'
      ArrivalTime:
        type: string
        format: date-time
        description: Specifies the arrival time at a specific stop for a specific trip on a route.
      DepartureTime:
        type: string
        format: date-time
        description: Specifies the departure time at a specific stop for a specific trip on a route.
paths:
  # leaving login for now
  /route:
    post:
      description: Searches for routes in the database, using the supplied filtering criteria; at least one of the fields must be non-empty
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: routeFilter
          in: body
          required: true
          description: Object containing the desired filtering criteria.
          schema:
            $ref: '#/definitions/RouteFilter'
      responses:
        '200':
          description: Array containing routes which meet the supplied criteria.
          schema:
            type: array
            items:
              $ref: "#/definitions/Route"
        '400':
          description: The supplied filter is invalid.
          schema:
            $ref: "#/definitions/ErrorMessage"
  /stop:
    post:
      description: Searches for stops in the database, using the supplied filtering criteria; at least one of the fields must be non-empty
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: stopFilter
          in: body
          required: true
          description: Object containing the desired filtering criteria.
          schema:
            $ref: '#/definitions/StopFilter'
      responses:
        '200':
          description: Array containing stops which meet the supplied criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Stop'
  /timetable/stop/{stopId}:
    get:
      description: Fetches a timetable for the stop with the supplied ID number
      produces:
        - application/json
      parameters:
        - name: stopId
          in: path
          required: true
          description: The ID of the stop for which to fetch the timetable.
          type: integer
      responses:
        '200':
          description: Array containing the timetable data.
          schema:
            type: array
            items:
              $ref: '#/definitions/StopTimetableEntry'
  /timetable/route/{routeId}:
    get:
      description: Fetches a timetable for the route with the supplied ID number
      produces:
        - application/json
      parameters:
        - name: routeId
          in: path
          required: true
          description: The ID of the route for which to fetch the timetable.
          type: integer
      responses:
        '200':
          description: Array containing the timetable data.
          schema:
            type: array
            items:
              $ref: '#/definitions/RouteTimetableEntry'
  /trip:
    post:
      description: Returns a list of trips that run between the two specified stops, along with their arrival/destination times and service availability information
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tripSearchFilter
          in: body
          required: true
          description: The object containing the query parameters.
          schema:
            $ref: '#/definitions/TripSearchFilter'
      responses:
        '200':
          description: A list of trips running through the desired stops.
          schema:
            type: array
            items:
              $ref: '#/definitions/TripInfo'
        '400':
          description: The request sent by the user was invalid.
          schema:
            $ref: "#/definitions/ErrorMessage"
  /user/register:
    post:
      description: Registers a user for the application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: registrationInfo
          in: body
          required: true
          description: Object storing the registration request data
          schema:
            $ref: '#/definitions/RegistrationInfo'
      responses:
        '200':
          description: The user was registered successfully.
        '400':
          description: The request sent by the user was invalid.
          schema:
            $ref: "#/definitions/ErrorMessage"
  /user/changepassword:
    post:
      description: Allows a user to change their account password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: passwordChangeRequest
          in: body
          required: true
          description: Object containing request data.
          schema:
            $ref: '#/definitions/PasswordChangeRequest'
      responses:
        '200':
          description: The user's password was successfully changed.
        '400':
          description: The request sent by the user was invalid.
          schema:
            $ref: "#/definitions/ErrorMessage"